[gd_scene load_steps=3 format=2]

[ext_resource path="res://Icon.tscn" type="PackedScene" id=1]

[sub_resource type="GDScript" id=1]
script/source = "extends Control

var pos
var dont_remove = false
var sprite
var type
var active = true
var card
var button
var tooltips
var hovering = false
var rect_size_mod
var fine_print = false
var value_text = \"\"
var permanent_bonus = \"\"
var permanent_multiplier = \"\"
var item = false
var selectable = true
var off_screen = false
var source
var main
var popup

var cant_go_dirs = []
var selector_alignment = \"dont\"

var growth = 0

func _free_if_orphaned():
	if not is_inside_tree():
		queue_free()

func _input(event):
	if get_parent().get_path() == \"/root/Main/Garden\" and get_parent().visible and hovering and event is InputEventMouseButton and ((event.is_pressed() and $\"/root/Main/Options Sprite/Options\".input_type == 1) or ($\"/root/Main/Options Sprite/Options\".input_type == 0 and (event.is_pressed()))) and event.button_index == BUTTON_LEFT and not event.is_echo():
		type = $\"/root/Main\".seed_being_added
		sprite.set_type(\"planted\")
		growth = 0
		$\"/root/Main\".seed_being_added = \"\"
		$\"/root/Main\".time_until_seeds = 3
		$\"/root/Main/Dragged Seed\".raw_string = \"\"
		$\"Rectangle\".visible = false

func _init():
	if not Utils.is_connected(\"freeing_orphans\", self, \"_free_if_orphaned\"):
		Utils.connect(\"freeing_orphans\", self, \"_free_if_orphaned\")

func _ready():
	sprite = $\"Icon\"
	card = get_parent().get_parent().get_parent()
	if not $\"/root/Main/Options Sprite/Options\".CJK_lang:
		button = get_parent().get_parent()
		if get_parent().get_parent().get_parent() is TextureButton:
			rect_size_mod = 0.25
		elif get_parent().get_parent().get_parent() == $\"/root/Main/Pop-up Sprite/Pop-up/Container\":
			if get_parent().get_parent().get_parent().get_parent().emails[0].type == \"add_tile_prompt\":
				rect_size_mod = 0.25
			else:
				rect_size_mod = 0.625
		else:
			rect_size_mod = 1.0
	else:
		button = get_parent().get_parent().get_parent()
		rect_size_mod = 2.0
	rect_size_mod = 1.0
	tooltips = $\"/root/Main/Tooltips\"
	sprite.set_type(type)

func update():
	if visible and active:
		if is_inside_tree():
			if active and hovering and (not OS.is_window_focused() or $\"/root/Main\".mouse_position.x < rect_global_position.x or $\"/root/Main\".mouse_position.x > rect_global_position.x + rect_size.x * rect_scale.x or $\"/root/Main\".mouse_position.y < rect_global_position.y or $\"/root/Main\".mouse_position.y > rect_global_position.y + rect_size.y * rect_scale.y):
				unhover()
				hovering = false
			elif active and not hovering and OS.is_window_focused() and not ($\"/root/Main\".mouse_position.x < rect_global_position.x or $\"/root/Main\".mouse_position.x > rect_global_position.x + rect_size.x * rect_scale.x or $\"/root/Main\".mouse_position.y < rect_global_position.y or $\"/root/Main\".mouse_position.y > rect_global_position.y + rect_size.y * rect_scale.y):
				hover()

func hover():
	if active and visible:
		if card != null and str(card.get_path()).find(\"Card\") != -1 and card.active and not (((rect_global_position.y + rect_size.y >= card.get_parent().rect_global_position.y + card.get_parent().rect_size.y) or (rect_global_position.y <= card.get_parent().rect_global_position.y))):
			card.hover()
		
		if get_parent().get_path() == \"/root/Main/Garden\":
			if $\"/root/Main\".seed_being_added != \"\":
				$\"Rectangle\".visible = true
				hovering = true
		elif can_add_tooltip():
			hovering = true
			var tooltip = load(\"res://Tooltip.tscn\").instance()
			var database = $\"/root/Main/\".tile_database
			if not database.has(type):
				return
			tooltip.get_child(0).data = database[type]
			tooltip.source = self
			tooltip.origin = self
			tooltips.add_child(tooltip)

func unhover():
	$\"Rectangle\".visible = false
	for t in tooltips.get_children():
		if t.locked_pos == null and (t.source != card or t.origin == self):
			t.queue_free()

func toggle_disabled():
	for i in $\"/root/Main/Items\".items:
		if i.type == type:
			i.toggle_disabled()
			break
	for z in $\"/root/Main/Tooltips\".get_children():
		z.queue_free()

func add_empty():
	var z = load(\"res://Slot Icon.tscn\").instance()
	z.type = \"empty\"
	z.in_reels = false
	main.add_child(z)
	z.soft_changing = true
	z.change_type(\"empty\", false)
	
	if not popup.saved_symbol_counts.has(\"empty\" + z.get_child(1).raw_string + z.get_child(3).raw_string + z.get_child(2).raw_string):
		popup.saved_symbol_counts[\"empty\" + z.get_child(1).raw_string + z.get_child(3).raw_string + z.get_child(2).raw_string] = {\"count\": 1, \"value_text\": z.get_child(1).raw_string}
		popup.saved_symbol_data.push_back({\"type\": \"empty\", \"rarity\": z.rarity, \"value\": z.value, \"value_text\": z.get_child(1).raw_string, \"permanent_bonus\": z.get_child(3).raw_string, \"permanent_multiplier\": z.get_child(2).raw_string, \"times_displayed\": 0})
	else:
		popup.saved_symbol_counts[\"empty\" + z.get_child(1).raw_string + z.get_child(3).raw_string + z.get_child(2).raw_string].count += 1
	main.remove_child(z)
	z.queue_free()

func can_add_tooltip():
	if tooltips.get_children().size() < 10 and type != \"item_missing\" and $\"/root/Main\".tile_database.has(type):
		for t in tooltips.get_children():
			if (t != null and t.source == card) or card == null or card is Viewport or t.hover_timer < 80 or t.source == null or not card.tooltip_card or (((rect_global_position.y + rect_size.y >= card.get_parent().rect_global_position.y + card.get_parent().rect_size.y) or (rect_global_position.y <= card.get_parent().rect_global_position.y))):
				return false
		return true
	else:
		return false

func update_hitbox():
	if type != \"coin\":
		rect_size = Vector2(sprite.texture.get_size().x * sprite.scale.x - 1, sprite.texture.get_size().y * sprite.scale.y - 1)
		active = true
	else:
		rect_size = Vector2(0, 0)
		selectable = false
"

[node name="Hover Icon" type="Control" groups=["Anim Update", "Selectable"]]
anchor_right = 1.0
anchor_bottom = 1.0
margin_right = -1024.0
margin_bottom = -576.0
mouse_filter = 2
script = SubResource( 1 )
__meta__ = {
"_edit_lock_": true
}

[node name="Icon" parent="." instance=ExtResource( 1 )]

[node name="Rectangle" type="Node2D" parent="."]
visible = false
z_index = 5
__meta__ = {
"_edit_lock_": true
}

[node name="ColorRect" type="ColorRect" parent="Rectangle"]
margin_right = 32.0
margin_bottom = 32.0
color = Color( 0.113725, 0.521569, 0.0470588, 0.411765 )
__meta__ = {
"_edit_lock_": true
}
