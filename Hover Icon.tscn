[gd_scene load_steps=3 format=2]

[ext_resource path="res://Icon.tscn" type="PackedScene" id=1]

[sub_resource type="GDScript" id=1]
script/source = "extends Control

var pos
var dont_remove = false
var sprite
var type
var active = true
var card
var button
var tooltips
var hovering = false
var rect_size_mod
var fine_print = false
var value_text = \"\"
var permanent_bonus = \"\"
var permanent_multiplier = \"\"
var item = false
var selectable = true
var off_screen = false
var source
var main
var popup

var cant_go_dirs = []
var selector_alignment = \"dont\"

var growth = 0
var grid_position = Vector2(0, 0)
var multiplier = 1

var water_needed
var every
var sells_for
var growth_turns

func _free_if_orphaned():
	if not is_inside_tree():
		queue_free()

func _input(event):
	if get_parent().get_path() == \"/root/Main/Garden\" and get_parent().visible and hovering and event is InputEventMouseButton and ((event.is_pressed() and $\"/root/Main/Options Sprite/Options\".input_type == 1) or ($\"/root/Main/Options Sprite/Options\".input_type == 0 and (event.is_pressed()))) and event.button_index == BUTTON_LEFT and not event.is_echo():
		if (type == \"dirt\" and $\"/root/Main\".seed_being_added != \"\" and $\"/root/Main\".seed_being_added != \"squash\") or (type != \"dirt\" and $\"/root/Main\".seed_being_added == \"squash\"):
			sprite.set_type(\"planted\")
			$\"/root/Main\".time_until_seeds = 3
			$\"/root/Main/Info2\".raw_string = \"Seed delivery in <icon_time><color_FF0037>\" + str($\"/root/Main\".time_until_seeds) + \"<end>\"
			type = $\"/root/Main\".seed_being_added
			$\"/root/Main/Dragged Seed\".visible = false
			$\"Rectangle\".visible = false
			sprite.set_type(\"planted\")
			change_type(type)
			if growth_turns - growth > 0:
				if $\"/root/Main/Garden\".timers[grid_position.x][grid_position.y].get_child(0).raw_string.find(\"<icon_rain>\") == -1:
					$\"/root/Main/Garden\".timers[grid_position.x][grid_position.y].get_child(0).raw_string = \"<icon_time><color_FF0037>\" + str(growth_turns - growth) + \"<end>\"
			else:
				sprite.set_type(type)
			$\"/root/Main\".seed_being_added = \"\"

func change_type(t):
	$\"/root/Main/Cards\".visible = false
	$\"Dirt\".visible = true
	growth = 0
	type = t
	multiplier = 1
	if t == \"dirt\":
		water_needed = 0
		every = 0
		sells_for = 0
		growth_turns = 0
	else:
		water_needed = $\"/root/Main\".tile_database[t].water_needed
		every = $\"/root/Main\".tile_database[t].every
		sells_for = $\"/root/Main\".tile_database[t].sells_for
		growth_turns = $\"/root/Main\".tile_database[t].growth_turns

func _init():
	if not Utils.is_connected(\"freeing_orphans\", self, \"_free_if_orphaned\"):
		Utils.connect(\"freeing_orphans\", self, \"_free_if_orphaned\")

func _ready():
	sprite = $\"Icon\"
	card = get_parent().get_parent().get_parent()
	if not $\"/root/Main/Options Sprite/Options\".CJK_lang:
		button = get_parent().get_parent()
		if get_parent().get_parent().get_parent() is TextureButton:
			rect_size_mod = 0.25
		elif get_parent().get_parent().get_parent() == $\"/root/Main/Pop-up Sprite/Pop-up/Container\":
			if get_parent().get_parent().get_parent().get_parent().emails[0].type == \"add_tile_prompt\":
				rect_size_mod = 0.25
			else:
				rect_size_mod = 0.625
		else:
			rect_size_mod = 1.0
	else:
		button = get_parent().get_parent().get_parent()
		rect_size_mod = 2.0
	rect_size_mod = 1.0
	tooltips = $\"/root/Main/Tooltips\"
	sprite.set_type(type)

func update():
	if visible and active:
		if is_inside_tree():
			if active and hovering and ($\"/root/Main\".mouse_position.x < rect_global_position.x or $\"/root/Main\".mouse_position.x > rect_global_position.x + rect_size.x * rect_scale.x or $\"/root/Main\".mouse_position.y < rect_global_position.y or $\"/root/Main\".mouse_position.y > rect_global_position.y + rect_size.y * rect_scale.y):
				unhover()
				hovering = false
			elif active and not hovering and not ($\"/root/Main\".mouse_position.x < rect_global_position.x or $\"/root/Main\".mouse_position.x > rect_global_position.x + rect_size.x * rect_scale.x or $\"/root/Main\".mouse_position.y < rect_global_position.y or $\"/root/Main\".mouse_position.y > rect_global_position.y + rect_size.y * rect_scale.y):
				hover()

func hover():
	if active and visible:
		if ($\"/root/Main/Cards\".visible and get_parent().get_path() == \"/root/Main/Garden\") or $\"/root/Main/Blurb Sprite\".visible or (not $\"/root/Main/Cards\".visible and str(get_path()).find(\"/root/Main/Cards\") != -1):
			return
		if card != null and str(card.get_path()).find(\"Card\") != -1 and card.active and not (((rect_global_position.y + rect_size.y >= card.get_parent().rect_global_position.y + card.get_parent().rect_size.y) or (rect_global_position.y <= card.get_parent().rect_global_position.y))):
			card.hover()
		if ($\"/root/Main\".seed_being_added != \"\" and $\"/root/Main\".seed_being_added != \"squash\" and not $\"/root/Main/\".tile_database.has(type)) or ($\"/root/Main\".seed_being_added == \"squash\" and $\"/root/Main/\".tile_database.has(type)):
			$\"Rectangle\".visible = true
			hovering = true
		elif can_add_tooltip():
			hovering = true
			var tooltip = load(\"res://Tooltip.tscn\").instance()
			var database = $\"/root/Main/\".tile_database
			if not database.has(type):
				return
			tooltip.get_child(0).data = database[type]
			tooltip.source = get_parent().get_parent().get_parent()
			tooltip.origin = self
			tooltips.add_child(tooltip)

func unhover():
	$\"Rectangle\".visible = false
	for t in tooltips.get_children():
		if t.locked_pos == null and (t.source != card or t.origin == self):
			t.queue_free()

func add_empty():
	var z = load(\"res://Slot Icon.tscn\").instance()
	z.type = \"empty\"
	z.in_reels = false
	main.add_child(z)
	z.soft_changing = true
	z.change_type(\"empty\", false)
	
	if not popup.saved_symbol_counts.has(\"empty\" + z.get_child(1).raw_string + z.get_child(3).raw_string + z.get_child(2).raw_string):
		popup.saved_symbol_counts[\"empty\" + z.get_child(1).raw_string + z.get_child(3).raw_string + z.get_child(2).raw_string] = {\"count\": 1, \"value_text\": z.get_child(1).raw_string}
		popup.saved_symbol_data.push_back({\"type\": \"empty\", \"rarity\": z.rarity, \"value\": z.value, \"value_text\": z.get_child(1).raw_string, \"permanent_bonus\": z.get_child(3).raw_string, \"permanent_multiplier\": z.get_child(2).raw_string, \"times_displayed\": 0})
	else:
		popup.saved_symbol_counts[\"empty\" + z.get_child(1).raw_string + z.get_child(3).raw_string + z.get_child(2).raw_string].count += 1
	main.remove_child(z)
	z.queue_free()

func can_add_tooltip():
	if tooltips.get_children().size() < 10 and type != \"item_missing\" and $\"/root/Main\".tile_database.has(type):
		for t in tooltips.get_children():
			if (t != null and t.source == card) or card == null or card is Viewport or t.hover_timer < 80 or t.source == null or not card.tooltip_card:
				return false
		return true
	else:
		return false

func update_hitbox():
	if type == \"time\" or type == \"rain\" or type == \"seed\":
		set_process_input(false)
		active = false
	elif type != \"coin\":
		rect_size = Vector2(sprite.texture.get_size().x * sprite.scale.x - 1, sprite.texture.get_size().y * sprite.scale.y - 1)
		active = true
	else:
		rect_size = Vector2(0, 0)
		selectable = false

func get_adjacent_icons():
	var arr = []
	var checker_x
	var checker_y
	var x = grid_position.x
	var y = grid_position.y
	
	for n in range(9):
		checker_x = (n % 3) - 1
		checker_y = -1 + floor(n / 3)
		if x + checker_x >= 0 and x + checker_x < $\"/root/Main/Garden\".grid_size.x and y + checker_y >= 0 and y + checker_y < $\"/root/Main/Garden\".grid_size.y and not (checker_x == 0 and checker_y == 0):
			arr.push_back($\"/root/Main/Garden\".grid[x + checker_x][y + checker_y])
	
	arr.erase(self)
	return arr

func check_effects():
	if type != \"dirt\":
		growth += 1
		if every == 0 or int(growth) % int(every) == 0:
			var water_mod = 0
			for i in get_adjacent_icons():
				if i.type == \"sprinkler\" or i.type == \"pitcher\":
					water_mod -= 1
				elif i.type == \"mega_sprinkler\":
					water_mod -= 3
			var water_taken = water_needed + water_mod
			if water_taken < 0:
				water_taken = 0
			$\"/root/Main/Garden\".queued_water -= water_taken
			if water_taken != 0:
				$\"/root/Main/Garden\".timers[grid_position.x][grid_position.y].get_child(0).raw_string = \"<color_388BFF><icon_rain>\" + str(-water_taken) + \"<end>\"
		if type == \"sunflower\":
			var no_sunflower = true
			for i in get_adjacent_icons():
				if i.type == \"sunflower\":
					no_sunflower = false
					break
			if no_sunflower:
				growth -= 1
		if type != \"dirt\" and growth >= growth_turns:
			sprite.set_type(type)
			match type:
				\"crabgrass\":
					if grid_position.x > 0:
						if $\"/root/Main/Garden\".grid[grid_position.x - 1][grid_position.y].type == \"dirt\":
							$\"/root/Main/Garden\".grid[grid_position.x - 1][grid_position.y].sprite.set_type(\"crabgrass\")
							$\"/root/Main/Garden\".grid[grid_position.x - 1][grid_position.y].change_type(\"crabgrass\")
					if grid_position.x < $\"/root/Main/Garden\".grid_size.x - 1:
						if $\"/root/Main/Garden\".grid[grid_position.x + 1][grid_position.y].type == \"dirt\":
							$\"/root/Main/Garden\".grid[grid_position.x + 1][grid_position.y].sprite.set_type(\"crabgrass\")
							$\"/root/Main/Garden\".grid[grid_position.x + 1][grid_position.y].change_type(\"crabgrass\")
				\"clover\":
					$\"/root/Main\".rarity_bonuses[\"seeds\"][\"uncommon\"] *= 1.1
					$\"/root/Main\".rarity_bonuses[\"seeds\"][\"rare\"] *= 1.1
					$\"/root/Main\".rarity_bonuses[\"seeds\"][\"very_rare\"] *= 1.1
				\"mint\":
					randomize()
					if rand_range(0, 1) < 0.5:
						randomize()
						var arr = get_adjacent_icons()
						arr.shuffle()
						for i in get_adjacent_icons():
							if i.type == \"dirt\":
								i.sprite.set_type(\"planted\")
								i.change_type(\"mint\")
								break
				\"water_lily\":
					$\"/root/Main/Garden\".queued_water += 2
					$\"/root/Main/Garden\".timers[grid_position.x][grid_position.y].get_child(0).raw_string = \"<color_388BFF><icon_rain>+2<end>\"
				\"herbivorous\":
					if int(growth - growth_turns) % 3 == 0 and growth > growth_turns:
						var destroyed_something = false
						randomize()
						var arr = get_adjacent_icons()
						arr.shuffle()
						for i in arr:
							if i.type != \"dirt\":
								destroyed_something = true
								i.sprite.set_type(\"dirt\")
								i.change_type(\"dirt\")
								$\"/root/Main/Garden\".timers[i.grid_position.x][i.grid_position.y].get_child(0).raw_string = \"\"
								break
						if not destroyed_something:
							sprite.set_type(\"dirt\")
							change_type(\"dirt\")
		elif $\"/root/Main/Garden\".timers[grid_position.x][grid_position.y].get_child(0).raw_string.find(\"<icon_rain>\") == -1:
			$\"/root/Main/Garden\".timers[grid_position.x][grid_position.y].get_child(0).raw_string = \"<icon_time><color_FF0037>\" + str(growth_turns - growth) + \"<end>\"
"

[node name="Hover Icon" type="Control" groups=["Anim Update", "Selectable"]]
anchor_right = 1.0
anchor_bottom = 1.0
margin_right = -1024.0
margin_bottom = -576.0
mouse_filter = 2
script = SubResource( 1 )
__meta__ = {
"_edit_lock_": true
}

[node name="Icon" parent="." instance=ExtResource( 1 )]
z_as_relative = true

[node name="Rectangle" type="Node2D" parent="."]
visible = false
z_index = 5
__meta__ = {
"_edit_lock_": true
}

[node name="ColorRect" type="ColorRect" parent="Rectangle"]
margin_right = 36.0
margin_bottom = 36.0
color = Color( 0.113725, 0.521569, 0.0470588, 0.411765 )
__meta__ = {
"_edit_lock_": true
}

[node name="Dirt" type="ColorRect" parent="."]
visible = false
margin_right = 36.0
margin_bottom = 36.0
color = Color( 0.478431, 0.14902, 0.14902, 1 )
__meta__ = {
"_edit_lock_": true
}
