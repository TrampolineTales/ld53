[gd_scene load_steps=3 format=2]

[ext_resource path="res://PICO-8.tres" type="DynamicFont" id=1]

[sub_resource type="GDScript" id=1]
script/source = "extends Label

var cant_start_line_zh = \"!%),.:;?]}¢°·\\'\\\"\\\"†‡›℃∶、。〃〆〕〗〞﹚﹜！＂％＇），．：；？！］｝～\"
var cant_end_line_zh = \"$(£¥·\\'\\\"〈《「『【〔〖〝﹙﹛＄（．［｛￡￥\"
var cant_break_line_zh = \"-0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ,\\u2003\\u3000\"

var cant_start_line_tc = \"!),.:;?]}¢·–—'\\\"•、。〆〞〕〉》」︰︱︲︳﹐﹑﹒﹓﹔﹕﹖﹘﹚﹜！），．：；？︶︸︺︼︾﹀﹂﹗］｜｝､\"
var cant_end_line_tc = \"([{£¥\\'\\\"‵〈《「『〔〝︴﹙﹛（｛︵︷︹︻︽︿﹁﹃﹏\"

var cant_start_line_ja = \")]｝〕〉》」』】〙〗〟\\'\\\"｠»ヽヾーァィゥェォッャュョヮヵヶぁぃぅぇぉっゃゅょゎゕゖㇰㇱㇲㇳㇴㇵㇶㇷㇸㇹㇺㇻㇼㇽㇾㇿ々〻‐゠–〜?!‼⁇⁈⁉・、:;,。.\"
var cant_end_line_ja = \"([｛〔〈《「『【〘〖〝\\'\\\"｟«\"
var cant_break_line_ja = \"-0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ—...‥〳〴〵,\\u00A0\"

var icons = []
var icon_positions = []
var colors = []
var color_texts = []
var color_positions = []
var extra_color_texts = []
var values = [0, 0, 0, 0]
var dynamic_icons = []
var border_text = false
var icon_z_index
var forced_font
var custom_max_width
var icon_scale_override = 0
var can_display_decimals = true

var raw_string = \"\"
var cut_characters = 0
var saved_value_texts = []
var saved_pb_texts = []
var saved_pm_texts = []

var icon_offset = Vector2(0, 0)
var item_icon_offset = Vector2(0, 0)
var cjk = true
var ff_override = false
var v_spaced = false
var e_spaced = false
var i_spaced = false
var cjk_space = \"\\u200A\"
var diff_cjk_space = false
var dynamic_icons_num = 0
var fine_print_icon_pos = -1

func _free_if_orphaned():
	if not is_inside_tree():
		queue_free()

func _init():
	if not Utils.is_connected(\"freeing_orphans\", self, \"_free_if_orphaned\"):
		Utils.connect(\"freeing_orphans\", self, \"_free_if_orphaned\")
	add_font_override(\"font\", preload(\"res://PICO-8.tres\"))

func _ready():
	if TranslationServer.get_locale() != \"zh\" and TranslationServer.get_locale() != \"zh_TW\" and TranslationServer.get_locale() != \"zh_HK\" and TranslationServer.get_locale() != \"ko\" and TranslationServer.get_locale() != \"ja\":
		cjk = false

func update_positions_on_insert(i):
	for icon_pos in range(icon_positions.size()):
		if icon_positions[icon_pos] >= i:
			icon_positions[icon_pos] += 1
	for icon_pos in range(color_positions.size()):
		if color_positions[icon_pos] >= i:
			color_positions[icon_pos] += 1

func change_icon_size_override(size, i_offset):
	var t
	if not cjk and forced_font == null and int($\"/root/Main/Options Sprite/Options\".display_font) == 0:
		t = get_parent().get_node(get_path()).texts[8]
		t.icon_scale_override = size
	else:
		t = self
		get_child(0).icon_scale_override = size
	if i_offset == null:
		match size:
			3:
				if cjk or forced_font != null:
					t.icon_offset = Vector2(2, 6)
				else:
					t.icon_offset = Vector2(2, -2)
			4:
				if cjk or forced_font != null:
					t.icon_offset = Vector2(2, -1)
				else:
					t.icon_offset = Vector2(-6, -6)
	elif not cjk and forced_font == null and int($\"/root/Main/Options Sprite/Options\".display_font) == 0:
		t.icon_offset = i_offset
	else:
		get_child(0).icon_offset = i_offset

func parse_num_str(st):
	var num = float(st)
	var new_str = st
	var decimal_location = 0
	var decimal_pos = 0
	if ((get_path() != \"/root/Main/Coins\" and (num > 9999 or num < -9999)) or ((num > 999999999 or num < -99999999) and get_path() == \"/root/Main/Coins\")) and $\"/root/Main/Options Sprite/Options\".scientific_notation and raw_string != tr(\"guillotine_essence_desc\"):
		var divnum
		if num < 0:
			divnum = -float(st.substr(1, 2)) / 10
			new_str = str(divnum) + \"e\" + str(st.length() - 2)
		else:
			divnum = float(st.substr(0, 2)) / 10
			new_str = str(divnum) + \"e\" + str(st.length() - 1)
	for s in range(new_str.length()):
		if new_str[new_str.length() - s - 1] == \".\":
			new_str[new_str.length() - s - 1] = tr(\"decimal_separator\")
			decimal_location = new_str.length() - s - 2
			decimal_pos = s
			break
	if ((get_path() != \"/root/Main/Coins\" and (num <= 9999 and num >= -9999)) or ((num <= 999999999 and num >= -99999999) and get_path() == \"/root/Main/Coins\")) or not $\"/root/Main/Options Sprite/Options\".scientific_notation or raw_string == tr(\"guillotine_essence_desc\"):
		if $\"/root/Main/Options Sprite/Options\".digit_separators:
			var b = 0
			if decimal_pos != 0:
				b -= 1
			for s in range(1 + decimal_pos, st.length()):
				b += 1
				if b % int(tr(\"big_number_separator_interval\")) == 0 and new_str[st.length() - b - decimal_location - 1] != \"-\" and s > decimal_pos + 1 and b != 0:
					new_str = new_str.insert(st.length() - s, tr(\"big_number_separator\"))
	var n_str = \"\"
	if not can_display_decimals and not $\"/root/Main/Options Sprite/Options\".scientific_notation:
		for c in new_str:
			if c == tr(\"decimal_separator\"):
				break
			else:
				n_str += c
	else:
		n_str = new_str
	return n_str

func check_locale():
	var string_width = 0
	var start = 0
	var i = 0
	var escape_string = \"\"
	var match_string = \"\"
	var max_width = 992
	if custom_max_width != null:
		max_width = custom_max_width
	else:
		if get_parent().has_method(\"remove_icons\") and not ff_override and forced_font == null and get_parent().forced_font != null:
			forced_font = get_parent().forced_font
			ff_override = true
		var parent = get_parent().get_parent()
		if parent.get(\"rect_size\") != null:
			if parent.has_method(\"update_size\"):
				parent.update_size()
			max_width = parent.rect_size.x - 16 - 1
		if max_width < 50:
			max_width = 50
	var parent = get_parent()
	dynamic_icons_num = 0
	while i < text.length() - 1:
		if text[i] == \"<\":
			start = i
			match_string += text[i]
			text = text.substr(0, i) + text.substr(i + 1, -1)
			while text[i] != \">\" and text.length() > 0:
				escape_string += text[i]
				match_string += text[i]
				text = text.substr(0, i) + text.substr(i + 1, -1)
			var dont_remove = false
			
			if raw_string.substr(i + cut_characters, match_string.length()) == match_string:
				dont_remove = true
			parse_escape(escape_string, i, start, dont_remove)
			cut_characters += match_string.length()
			match_string = \"\"
			escape_string = \"\"
			i -= 1
		elif text[i] == \"\\n\":
			string_width = 0
		else:
			string_width += get_font(\"font\").get_string_size(text[i]).x * rect_scale.x * parent.rect_scale.x
		var saved_i = 0
		if string_width >= max_width:
			saved_i = i
			if (TranslationServer.get_locale() == \"zh\" and forced_font == null) or (forced_font != null and forced_font.font_data.font_path == \"res://NotoSansSC-Regular.otf\"):
				var insert_flag = false
				while i > 0:
					var can_insert = true
					for c in range(cant_start_line_zh.length()):
						if cant_start_line_zh[c] == text[i]:
							i -= 1
							can_insert = false
							break
					if can_insert:
						if text[i - 1] == \"\\u2003\" and text[i] == cjk_space:
							i -= 1
							can_insert = false
						else:
							for c in range(cant_end_line_zh.length()):
								if cant_end_line_zh[c] == text[i - 1]:
									i -= 1
									can_insert = false
									break
					if can_insert:
						var broken_out = false
						for c in range(cant_break_line_zh.length()):
							if cant_break_line_zh[c] == text[i - 1]:
								for d in range(cant_break_line_zh.length()):
									if cant_break_line_zh[d] == text[i]:
										i -= 1
										can_insert = false
										broken_out = true
										break
							if broken_out:
								break
					if can_insert:
						if text[i] == cjk_space and i > 1 and cant_break_line_zh.find(text[i - 2]) == -1 and cant_start_line_zh.find(text[i + 1]) == -1:
							text[i] = \"\\u2028\"
							text[i - 1] = \"\\u2028\"
							text = text.insert(i, \"\\n\")
						else:
							if not insert_flag and (text[i] == cjk_space or text[i] == \" \") and cant_start_line_zh.find(text[i + 1]) == -1:
								text[i] = \"\\n\"
							else:
								if cant_break_line_zh.find(text[i - 1]) != -1 or cant_start_line_zh.find(text[i + 1]) != -1:
									insert_flag = true
									i -= 1
									continue
								text = text.insert(i, \"\\n\")
							update_positions_on_insert(i)
						string_width = 0
						i -= 1
						break
			elif ((TranslationServer.get_locale() == \"zh_TW\" or TranslationServer.get_locale() == \"zh_HK\") and forced_font == null) or (forced_font != null and (forced_font.font_data.font_path == \"res://NotoSansTC-Regular.otf\" or forced_font.font_data.font_path == \"res://NotoSansHK-Regular.otf\")):
				var insert_flag = false
				while i > 0:
					var can_insert = true
					for c in range(cant_start_line_tc.length()):
						if cant_start_line_tc[c] == text[i]:
							i -= 1
							can_insert = false
							break
					if can_insert:
						for c in range(cant_end_line_tc.length()):
							if cant_end_line_tc[c] == text[i - 1]:
								i -= 1
								can_insert = false
								break
					if can_insert:
						var broken_out = false
						for c in range(cant_break_line_zh.length()):
							if cant_break_line_zh[c] == text[i - 1]:
								for d in range(cant_break_line_zh.length()):
									if cant_break_line_zh[d] == text[i]:
										i -= 1
										can_insert = false
										broken_out = true
										break
							if broken_out:
								break
					if can_insert:
						if text[i] == cjk_space and i > 1 and cant_break_line_zh.find(text[i - 2]) == -1 and cant_start_line_tc.find(text[i + 1]) == -1:
							text[i] = \"\\u2028\"
							text[i - 1] = \"\\u2028\"
							text = text.insert(i, \"\\n\")
						else:
							if not insert_flag and (text[i] == cjk_space or text[i] == \" \") and cant_start_line_tc.find(text[i + 1]) == -1:
								text[i] = \"\\n\"
							else:
								if cant_break_line_zh.find(text[i - 1]) != -1 or cant_start_line_tc.find(text[i + 1]) != -1:
									insert_flag = true
									i -= 1
									continue
								text = text.insert(i, \"\\n\")
							update_positions_on_insert(i)
						string_width = 0
						i -= 1
						break
			elif (TranslationServer.get_locale() == \"ja\" and forced_font == null) or (forced_font != null and forced_font.font_data.font_path == \"res://NotoSansJP-Regular.otf\"):
				var insert_flag = false
				while i > 0:
					var can_insert = true
					for c in range(cant_start_line_ja.length()):
						if cant_start_line_ja[c] == text[i]:
							i -= 1
							can_insert = false
							break
					if can_insert:
						for c in range(cant_end_line_ja.length()):
							if cant_end_line_ja[c] == text[i - 1]:
								i -= 1
								can_insert = false
								break
					if can_insert:
						var broken_out = false
						for c in range(cant_break_line_ja.length()):
							if cant_break_line_ja[c] == text[i - 1]:
								for d in range(cant_break_line_ja.length()):
									if cant_break_line_ja[d] == text[i]:
										i -= 1
										can_insert = false
										broken_out = true
										break
							if broken_out:
								break
					if can_insert:
						if text[i] == cjk_space and i > 1 and cant_break_line_ja.find(text[i - 2]) == -1 and cant_start_line_ja.find(text[i + 1]) == -1:
							text[i] = \"\\u2028\"
							text[i - 1] = \"\\u2028\"
							text = text.insert(i, \"\\n\")
							insert_flag = false
						else:
							if not insert_flag and (text[i] == cjk_space or text[i] == \" \") and cant_start_line_ja.find(text[i + 1]) == -1:
								text[i] = \"\\n\"
								insert_flag = false
							else:
								if cant_break_line_ja.find(text[i - 1]) != -1 or cant_start_line_ja.find(text[i + 1]) != -1:
									insert_flag = true
									i -= 1
									continue
								text = text.insert(i, \"\\n\")
							update_positions_on_insert(i)
						string_width = 0
						i -= 1
						break
			else:
				var start_pos = i
				while true:
					if (text[i] == \" \" or text[i] == \"\\u2009\" or text[i] == \"\\u2003\" or text[i] == cjk_space) and icon_positions.find(i) == -1:
						text[i] = \"\\n\"
						string_width = 0
						break
					elif i == -1 or text[i] == \"\\n\":
						while true:
							start_pos += 1
							if start_pos >= text.length() or text[start_pos] == \"<\":
								i = start_pos - 2
								break
							elif text[start_pos] == \" \" or text[i] == \"\\u2009\" or text[i] == \"\\u2003\" or text[i] == cjk_space:
								text[start_pos] = \"\\n\"
								i = start_pos - 1
								break
						string_width = 0
						i += 1
						break
					i -= 1
			if i == 0:
				string_width = 0
				if saved_i != 0:
					i = saved_i
		i += 1
	var y_multi
	y_multi = get_font(\"font\").get_height() + 3
	for icon_num in range(icons.size()):
		var y_diff = 0
		if e_spaced:
			y_diff = -2
		var last_break
		var x_string_value
		if cjk or forced_font != null:
			last_break = text.substr(0, icon_positions[floor(icon_num * 2)] + 1).find_last(\"\\n\")
		else:
			last_break = text.substr(0, icon_positions[floor(icon_num * 2)]).find_last(\"\\n\")
		x_string_value = icon_positions[floor(icon_num * 2)] - last_break - 1
		if x_string_value == -1:
			x_string_value = 0
		var h_count = 0
		if last_break == -1:
			h_count = -1
		if icons[icon_num].get_parent() != self:
			if cjk or forced_font != null or int($\"/root/Main/Options Sprite/Options\".display_font) > 0:
				if not parent.get_child(1).get_children().has(icons[icon_num]):
					parent.get_child(1).add_child(icons[icon_num])
			elif not parent.get_children().has(icons[icon_num]):
				parent.add_child(icons[icon_num])
			var icon = icons[icon_num].sprite
			icon.centered = false
			if icon_z_index == null:
				icon.z_index = 8
			else:
				icon.z_index = icon_z_index
			icon.set_type(icons[icon_num].type)
			var offset_pos = Vector2(0, 0)
			if cjk or (forced_font != null and (forced_font.get_path() != \"res://PICO-8.tres\" and forced_font.get_path() != \"res://PICO-8_Tooltips.tres\" and forced_font.get_path() != \"res://PICO-8_Emails.tres\" and forced_font.get_path() != \"res://Title_Font.tres\")):
				offset_pos = rect_position
			var icon_scale = 3
			var i_offset = icon_offset
			if icon_scale_override != 0:
				if $\"/root/Main\".tile_database.has(icons[icon_num].type):
					icon_scale = 1
					item_icon_offset = Vector2(-6, -6)
				else:
					icon_scale = icon_scale_override
				i_offset.x += item_icon_offset.x
				i_offset.y += item_icon_offset.y
				item_icon_offset = Vector2(0, 0)
			y_diff += 2 * (ceil(icon_scale / 3.0) - 1)
			icon.scale = Vector2(icon_scale, icon_scale)
			var x_diff = 0
			if int($\"/root/Main/Options Sprite/Options\".display_font) > 0:
				if get_parent().get_parent() is TextureButton:
					y_diff = 6
					x_diff = 6
				else:
					y_diff = -6
			icons[icon_num].rect_position = Vector2(round(get_font(\"font\").get_string_size(text.substr(last_break + 1, x_string_value)).x) * rect_scale.x + i_offset.x + offset_pos.x, round((text.count(\"\\n\", h_count, last_break + 1)) * y_multi * rect_scale.y + ((icon_scale / icon.texture.get_size().y) / 2)) + 1 + i_offset.y + offset_pos.y + y_diff)
	var to_be_added = []
	
	for b in range(color_texts.size()):
		var s = text.substr(color_positions[b * 2], color_positions[b * 2 + 1] - color_positions[b * 2])
		
		color_texts[b].add_color_override(\"default_color\", colors[b])
		color_texts[b].color = colors[b]
		color_texts[b].text = \"\"
		
		var num = 0
		var extra = false

		while s.length() > 0:
			if not extra:
				color_texts[b].text += s[0]
			else:
				extra_color_texts[extra_color_texts.size() - 1].text += s[0]
			num += 1
			if s[0] == \"\\n\":
				extra = true
				var n = preload(\"res://Pico Text.tscn\").instance()
				n.add_color_override(\"default_color\", colors[b])
				n.color = colors[b]
				if not cjk and forced_font == null and int($\"/root/Main/Options Sprite/Options\".display_font) == 0:
					n.add_font_override(\"font\", forced_font)
				elif cjk or forced_font != null:
					n.add_font_override(\"font\", forced_font)
				n.rect_position.y = text.count(\"\\n\", 0, color_positions[b * 2] + num) * ceil(y_multi)
				n.dont_remove = color_texts[b].dont_remove
				add_child(n)
				extra_color_texts.push_back(n)
			s = s.substr(1, -1)

		var last_break = text.substr(0, color_positions[b * 2]).find_last(\"\\n\")
		var h_count = 0
		if last_break == -1:
			h_count = -1
		color_texts[b].rect_position = Vector2(get_font(\"font\").get_string_size(text.substr(last_break + 1, color_positions[b * 2] - last_break - 1)).x, (text.count(\"\\n\", h_count, color_positions[b * 2]) * ceil(y_multi)))
		if color_texts[b].get_parent() != self:
			add_child(color_texts[b])
	cut_characters = 0

func parse_escape(s, pos, n, dr):
	var already_there = false
	var parent = get_parent()
	match s.substr(0, 1):
		\"i\":
			var type = s.substr(5, -1)
			if $\"/root/Main/Options Sprite/Options\".CJK_lang and TranslationServer.get_locale() != \"ko\" and forced_font == null:
				if rect_scale.x <= 0.375 or diff_cjk_space:
					cjk_space = \"\\u2002\"
				if type == \"coin\" or type == \"reroll_token\" or type == \"removal_token\" or type == \"essence_token\":
					if str(get_path()).find(\"Mod Text\") != -1:
						text[n] = \"  \"
					else:
						text[n] = \"\\u2003\" + cjk_space
				else:
					text[n] = \"\\u3000\" + cjk_space
				cut_characters -= 2
			elif int($\"/root/Main/Options Sprite/Options\".display_font) == 2:
				if rect_scale.x <= 0.375 or diff_cjk_space:
					cjk_space = \"\\u2002\"
				text[n] = \" \" + cjk_space
				cut_characters -= 2
			elif int($\"/root/Main/Options Sprite/Options\".display_font) != 0 or (TranslationServer.get_locale() == \"ko\" and forced_font == null):
				if rect_scale.x <= 0.375 or diff_cjk_space:
					cjk_space = \"\\u2002\"
				text[n] = \"\\u2003\" + cjk_space
				cut_characters -= 2
			else:
				text[n] = \"\\u2009 \"
				cut_characters -= 2
			for icon in icons:
				if icon.pos == pos and icon.type == type:
					already_there = true
					break
			if not already_there:
				if not border_text:
					var i = preload(\"res://Hover Icon.tscn\").instance()
					i.pos = pos
					
					i.type = type
					
					i.dont_remove = dr
					
					if cjk or forced_font != null:
						if saved_value_texts.size() > 0:
							i.value_text = saved_value_texts[icons.size()]
						if saved_pb_texts.size() > 0:
							i.permanent_bonus = saved_pb_texts[icons.size()]
						if saved_pm_texts.size() > 0:
							i.permanent_multiplier = saved_pm_texts[icons.size()]
					else:
						if parent.saved_value_texts.size() > 0:
							i.value_text = parent.saved_value_texts[icons.size()]
						if parent.saved_pb_texts.size() > 0:
							i.permanent_bonus = parent.saved_pb_texts[icons.size()]
						if parent.saved_pm_texts.size() > 0:
							i.permanent_multiplier = parent.saved_pm_texts[icons.size()]
					if fine_print_icon_pos != -1 and raw_string.length() - text.length() + pos >= fine_print_icon_pos:
						i.fine_print = true
					icons.push_back(i)
				icon_positions.push_back(n)
				icon_positions.push_back(n + 1)
		\"c\":
			text = text.substr(0, n) + text.substr(n + 1, -1)
			cut_characters += 1
			
			for color_pos in range(color_positions.size()):
				if color_pos % 2 == 0 and color_positions[color_pos] == pos:
					already_there = true
					break
			
			if not already_there:
				color_positions.push_back(n)
				colors.push_back(Color(s.substr(6, -1)))
				
				var c = preload(\"res://Pico Text.tscn\").instance()
				c.add_font_override(\"font\", forced_font)
				c.dont_remove = dr
				color_texts.push_back(c)
		\"e\":
			text = text.substr(0, n) + text.substr(n + 1, -1)
			cut_characters += 1
			for color_pos in range(color_positions.size()):
				if color_pos % 2 == 1 and color_positions[color_pos] == pos:
					already_there = true
					break
			if not already_there:
				color_positions.push_back(n)
		\"v\":
			text[n] = parse_num_str(str(values[int(s.substr(6, -1)) - 1]))
			cut_characters -= 1
		\"h\":
			if str(Input.get_joy_name(0)) == \"\":
				text[n] = $\"/root/Main/Options Sprite/Options\".hotkeys[s.substr(7, -1)][2]
			else:
				text[n] = $\"/root/Main/Options Sprite/Options\".hotkeys[s.substr(7, -1)][2] + \"/\" + $\"/root/Main/Options Sprite/Options\".hotkeys[s.substr(7, -1)][3]
			cut_characters -= 1
		\"g\":
			var icon_str = \"\"
			var group_arr
			var symbols = $\"/root/Main/\".tile_database
			if s.substr(0, 11) == \"group_item_\":
				if $\"/root/Main/\".group_database[\"items\"].has(s.substr(11, -1)):
					group_arr = $\"/root/Main/\".group_database[\"items\"][s.substr(11, -1)]
				else:
					group_arr = [\"item_missing\", \"item_missing\"]
				symbols = $\"/root/Main/\".item_database
			else:
				if $\"/root/Main/\".group_database[\"symbols\"].has(s.substr(6, -1)):
					group_arr = $\"/root/Main/\".group_database[\"symbols\"][s.substr(6, -1)]
				else:
					group_arr = [\"missing\", \"missing\"]
			var final_arr = []
			
			var offset_num = 0
			
			for g in group_arr:
				final_arr.push_back(symbols[g])
			if group_arr.size() == 1:
				offset_num += 1
			
			if cjk and TranslationServer.get_locale() != \"ko\" and forced_font == null:
				for num in range(final_arr.size() - 1 + offset_num):
					if final_arr[num].type != \"coin\":
						var type = final_arr[num].type
						icon_str += \"<icon_\" + type + \">\"
					else:
						icon_str += \"<icon_hover_coin>\"
				icon_str += cjk_space
			else:
				for num in range(final_arr.size() - 1 + offset_num):
					if final_arr[num].type != \"coin\":
						var type = final_arr[num].type
						icon_str += \"<icon_\" + type + \"> \"
					else:
						icon_str += \"<icon_hover_coin> \"
			icon_str = icon_str.substr(0, icon_str.length() - 1)
				
			text[n] = icon_str
			cut_characters -= icon_str.length() + 1
		\"l\":
			var space_string = \"\"
			var group_arr
			var symbols = $\"/root/Main/\".tile_database
			if s.substr(0, 10) == \"last_item_\":
				var l_type = $\"/root/Main\".append_steam_id(s.substr(10, -1), $\"/root/Main\".steam_id)
				if $\"/root/Main/\".group_database[\"items\"].has(l_type):
					group_arr = $\"/root/Main/\".group_database[\"items\"][l_type]
				else:
					group_arr = [\"item_missing\"]
				symbols = $\"/root/Main/\".item_database
			else:
				var l_type = $\"/root/Main\".append_steam_id(s.substr(5, -1), $\"/root/Main\".steam_id)
				if $\"/root/Main/\".group_database[\"symbols\"].has(l_type):
					group_arr = $\"/root/Main/\".group_database[\"symbols\"][l_type]
				else:
					group_arr = [\"missing\"]
			
			var final_arr = []
			
			for g in group_arr:
				final_arr.push_back(symbols[g])
			
			var type = final_arr[final_arr.size() - 1].type
			
			space_string = \"<icon_\" + type + \">\"
			text[n] = space_string
			cut_characters -= 2
		\"d\":
			cut_characters -= 1
			if dynamic_icons.size() > dynamic_icons_num and dynamic_icons[dynamic_icons_num] != null:
				text[n] = \"<icon_\" + dynamic_icons[dynamic_icons_num] + \">\"
				dynamic_icons_num += 1
			else:
				text[n] = \"<icon_missing>\"
		\"b\":
			if not $\"/root/Main\".hotkey_button_strings.has(get_parent()):
				$\"/root/Main\".hotkey_button_strings.push_back(get_parent())
			var b = s.substr(7, -1)
			var button = \"BTN_\" + b
			cut_characters -= 1
			match b:
				\"0\":
					if $\"/root/Main\".controller_type == \"xbox\":
						button = \"<icon_xbox_A>\"
					elif $\"/root/Main\".controller_type == \"playstation\":
						button = \"<icon_ps_cross>\"
					elif $\"/root/Main\".controller_type == \"nintendo\":
						button = \"<icon_switch_B>\"
					else:
						button = \"<icon_switch_A>\"
				\"1\":
					if $\"/root/Main\".controller_type == \"xbox\":
						button = \"<icon_xbox_B>\"
					elif $\"/root/Main\".controller_type == \"playstation\":
						button = \"<icon_ps_circle>\"
					elif $\"/root/Main\".controller_type == \"nintendo\":
						button = \"<icon_switch_A>\"
					else:
						button = \"<icon_switch_B>\"
				\"2\":
					if $\"/root/Main\".controller_type == \"xbox\":
						button = \"<icon_xbox_X>\"
					elif $\"/root/Main\".controller_type == \"playstation\":
						button = \"<icon_ps_square>\"
					elif $\"/root/Main\".controller_type == \"nintendo\":
						button = \"<icon_switch_Y>\"
					else:
						button = \"<icon_switch_X>\"
				\"3\":
					if $\"/root/Main\".controller_type == \"xbox\":
						button = \"<icon_xbox_Y>\"
					elif $\"/root/Main\".controller_type == \"playstation\":
						button = \"<icon_ps_triangle>\"
					elif $\"/root/Main\".controller_type == \"nintendo\":
						button = \"<icon_switch_X>\"
					else:
						button = \"<icon_switch_Y>\"
				\"4\":
					if $\"/root/Main\".controller_type == \"xbox\":
						button = \"<icon_xbox_lb>\"
					elif $\"/root/Main\".controller_type == \"nintendo\":
						button = \"<icon_switch_l>\"
					else:
						button = \"<icon_ps_l1>\"
				\"5\":
					if $\"/root/Main\".controller_type == \"xbox\":
						button = \"<icon_xbox_rb>\"
					elif $\"/root/Main\".controller_type == \"nintendo\":
						button = \"<icon_switch_r>\"
					else:
						button = \"<icon_ps_r1>\"
				\"6\":
					if $\"/root/Main\".controller_type == \"xbox\":
						button = \"<icon_xbox_lt>\"
					elif $\"/root/Main\".controller_type == \"nintendo\":
						button = \"<icon_switch_zl>\"
					else:
						button = \"<icon_ps_l2>\"
				\"7\":
					if $\"/root/Main\".controller_type == \"xbox\":
						button = \"<icon_xbox_rt>\"
					elif $\"/root/Main\".controller_type == \"nintendo\":
						button = \"<icon_switch_zr>\"
					else:
						button = \"<icon_ps_r2>\"
				\"8\":
					button = \"<icon_leftstick_click>\"
				\"9\":
					button = \"<icon_rightstick_click>\"
				\"10\":
					if $\"/root/Main\".controller_type == \"playstation\":
						button = \"<icon_ps_select>\"
					elif $\"/root/Main\".controller_type == \"nintendo\":
						button = \"<icon_switch_minus>\"
					else:
						button = \"<icon_xbox_select>\"
				\"11\":
					if $\"/root/Main\".controller_type == \"playstation\":
						button = \"<icon_ps_start>\"
					elif $\"/root/Main\".controller_type == \"nintendo\":
						button = \"<icon_switch_plus>\"
					else:
						button = \"<icon_xbox_start>\"
				\"12\":
					button = \"<icon_dpad_up>\"
				\"13\":
					button = \"<icon_dpad_down>\"
				\"14\":
					button = \"<icon_dpad_left>\"
				\"15\":
					button = \"<icon_dpad_right>\"
				\"22\":
					if $\"/root/Main\".controller_type == \"playstation\":
						button = \"<icon_ps_touchpad>\"
			text[n] = button
"

[node name="Pico Label" type="Label"]
anchor_right = 1.0
anchor_bottom = 1.0
custom_fonts/font = ExtResource( 1 )
script = SubResource( 1 )
__meta__ = {
"_edit_lock_": true,
"_edit_use_anchors_": false
}
